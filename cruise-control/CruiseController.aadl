package CruiseController
public
	with Base_Types;
	with VERDICT_Properties;

	annex agree {**

		const PI: real = 3.1416;
		const ONE_MILE: real = 1609.34; -- meters

		const WHEEL_DIAMETER: real = 0.52; -- meters
		const K: real = (3600.0/ONE_MILE)*(PI*WHEEL_DIAMETER);

		const MIN_SPEED: real = 25.0; -- mph
		const MAX_SPEED: real = 130.0; -- mph
		const SPEED_CHANGE_STEP: real = 1.0;
		const FORCE_COEFFICIENT: real = 0.1;

		node ToInt(b: bool) returns (i: int);
		let
			i = if b then 1 else 0;
		tel;
		
		node Max(a: real, b: real) returns (z: real);
		let
			z = if a >= b then a else b;
		tel;
		
		node UnchangedReal(n:real) returns (b:bool);
		let
 			b = true -> n = pre(n);
		tel;
		
		node InitiallyHolds(X:bool) returns (Y:bool);
		let
		  Y = X -> true;
		tel;
	**};

	system SetSpeed
		features
			on_off: in data port Base_Types::Boolean;
			resume_speed: in data port Base_Types::Boolean;
			set_speed: in data port Base_Types::Boolean;
			inc: in data port Base_Types::Boolean;
			dec: in data port Base_Types::Boolean;
			brake_cancel: in data port Base_Types::Boolean;
			speed: in data port Base_Types::Float;
			desired_speed: out data port Base_Types::Float
			{VERDICT_Properties::probe => true;};
			enabled: out data port Base_Types::Boolean;
		annex agree {**
			
			-- Modes
			eq off_mode: bool = true -> 
								(pre(off_mode) and not on_off) or
								(pre(ready_mode) and on_off) or
								(pre(on_mode) and on_off) or 
								(pre(paused_mode) and on_off);
			
			eq set_condition: bool = set_speed and MIN_SPEED <= speed and speed <= MAX_SPEED;
			
			eq ready_mode: bool = false ->
								  (pre(ready_mode) and not on_off and not set_condition) or
								  (pre(off_mode) and on_off);
			
			eq on_mode: bool = false ->
							   (pre(on_mode) and not on_off and not brake_cancel) or
							   (pre(ready_mode) and set_condition) or
							   (pre(paused_mode) and resume_speed);   
			
			eq paused_mode: bool = false ->
								   (pre(paused_mode) and not on_off and not resume_speed) or
								   (pre(on_mode) and brake_cancel);
			
			-- Assumptions
			assume "Speed is always a non-negative value": speed >= 0.0;
			
			assume "Buttons are mutually exclusive": 
					ToInt(on_off) + 
					ToInt(resume_speed) + ToInt(set_speed) + 
					ToInt(inc) + ToInt(dec) + ToInt(brake_cancel) <= 1;
			
			guarantee "Cruise control is enabled if and only if it is On":
					  enabled = on_mode;
			
			eq setting_condition: bool =
				false -> pre(ready_mode) and set_condition;
					  
			guarantee "Desired speed setting":
				setting_condition => desired_speed = speed; 
			
			eq increment_condition: bool =
				false -> pre(on_mode) and inc and pre(desired_speed) <= MAX_SPEED - SPEED_CHANGE_STEP;
			
			guarantee "Desired speed increment":
				true -> (increment_condition => desired_speed = pre(desired_speed) + SPEED_CHANGE_STEP);
			
			eq decrement_condition: bool =
				false -> pre(on_mode) and dec and pre(desired_speed) >= MIN_SPEED + SPEED_CHANGE_STEP;
			
			guarantee "Desired speed decrement":
				true -> (decrement_condition => desired_speed = pre(desired_speed) - SPEED_CHANGE_STEP);
			
			eq invariance_condition: bool =
				not setting_condition and not increment_condition and not decrement_condition;
			
			guarantee "Desired speed invariance":
				true -> (invariance_condition => desired_speed = pre(desired_speed));				
		**};
	end SetSpeed;
	
	system ControlSpeed
		features
			speed: in data port Base_Types::Float;
			desired_speed: in data port Base_Types::Float;
			force: out data port Base_Types::Float;
		annex agree {**
			-- Assumptions
			assume "Speed is always a non-negative value": speed >= 0.0;
				
			-- Guarantees			
			guarantee "Force is zero when desired speed is not greater than the current speed":
				desired_speed <= speed => force = 0.0;
			
			guarantee "Force is bounded by a proportional factor of the speed difference":
				force >= Max(0.0, FORCE_COEFFICIENT * (desired_speed - speed));
		**};
	end ControlSpeed;

	system MeasureSpeed
		features
			rotate: in event port;
			second: in event port;
			speed: out data port Base_Types::Float;
		annex agree {**
			eq nc: int = 0 -> pre(count) + (if event(rotate) then 1 else 0);
			eq count: int = if event(second) then 0 else nc;
			guarantee "Speed is initially zero": InitiallyHolds(speed = 0.0);
			guarantee "Speed is updated every second":
							true -> (event(second) => speed = ( K * real(nc)));
			guarantee "Speed stays unchanged when it is not updated":
							true -> (not event(second) => speed = pre(speed));
		**};
	end MeasureSpeed;

	system CruiseControllerSystem
		features
			on_off: in data port Base_Types::Boolean;
			resume_speed: in data port Base_Types::Boolean;
			set_speed: in data port Base_Types::Boolean;
			inc: in data port Base_Types::Boolean;
			dec: in data port Base_Types::Boolean;
			brake_cancel: in data port Base_Types::Boolean;
			rotate: in event port;
			second: in event port;
			force: out data port Base_Types::Float;
			enabled: out data port Base_Types::Boolean;

			-- Probe signals, not part of the actual system output
			speed: out data port Base_Types::Float;
			desired_speed: out data port Base_Types::Float;
		annex agree {**

			eq disabled: bool = not enabled;
			
			eq no_button_pressed: bool =
				not on_off and not resume_speed and not set_speed and
				not inc and not dec and not brake_cancel;
			
			-- Assumptions
			assume "Buttons are mutually exclusive": 
					ToInt(on_off) + ToInt(resume_speed) + ToInt(set_speed) + 
					ToInt(inc) + ToInt(dec) + ToInt(brake_cancel) <= 1;
				
			-- Properties
			guarantee "1. Cruise Controller System is enabled only if desired speed is within Cruise Controller minimum and maximun speed":
					   enabled => desired_speed >= MIN_SPEED and desired_speed <= MAX_SPEED;
			
			guarantee "2. Cruise Controller System is disabled initially":
					   InitiallyHolds(disabled);
			
			guarantee "3. When Cruise Controller System is disabled, the desired speed does not get changed":
					   disabled => UnchangedReal(desired_speed);
			
			guarantee "4. When Cruise Controller System is enabled and speed increase request does not exceed the maximum cruise controller speed, the desired speed is then increased accordingly":
					   true -> enabled and inc and pre(desired_speed) <= (MAX_SPEED - SPEED_CHANGE_STEP) =>
					   desired_speed = (pre(desired_speed) + SPEED_CHANGE_STEP);	
			
			guarantee "5. When Cruise Controller System is enabled and speed decrease request does not make desired speed become less than the minimum cruise controller speed, the desired speed is then decreased accordingly":
					   true -> enabled and dec and pre(desired_speed) > (MIN_SPEED + SPEED_CHANGE_STEP) =>
					   desired_speed = (pre(desired_speed) - SPEED_CHANGE_STEP);	
			
			guarantee "6. When Cruise Controller System is enabled and no button is pressed, the desired speed does not get changed":
					   enabled and no_button_pressed => UnchangedReal(desired_speed);		  
		
			guarantee "7. Force is zero if Cruise Controller System is enabled and the desired speed is not greater than the current speed":
						enabled and desired_speed <= speed => force = 0.0;
			
			guarantee "8. Force is positive if Cruise Controller System is enabled and the desired speed is greater than the current speed":
						enabled and desired_speed > speed => force > 0.0;
		**};
	end CruiseControllerSystem;
	
	system implementation CruiseControllerSystem.Impl
		subcomponents
			measureSpeed: system MeasureSpeed
			{
				-- VERDICT Component Properties
				VERDICT_Properties::insideTrustedBoundary => true;
				VERDICT_Properties::componentType => Hybrid;
				VERDICT_Properties::pedigree => InternallyDeveloped;
				VERDICT_Properties::adversariallyTestedForTrojanOrLogicBomb => 7;
			};
			setSpeed: system SetSpeed
			{
				-- VERDICT Component Properties
				VERDICT_Properties::insideTrustedBoundary => false;
				VERDICT_Properties::componentType => Hybrid;
				VERDICT_Properties::pedigree => InternallyDeveloped;
				VERDICT_Properties::adversariallyTestedForTrojanOrLogicBomb => 0;
			};
			controlSpeed: system ControlSpeed
			{
				-- VERDICT Component Properties
				VERDICT_Properties::insideTrustedBoundary => true;
				VERDICT_Properties::componentType => Hybrid;
				VERDICT_Properties::pedigree => InternallyDeveloped;
				VERDICT_Properties::adversariallyTestedForTrojanOrLogicBomb => 7;
			};
		
		connections
			c01: port on_off -> setSpeed.on_off
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c02: port resume_speed -> setSpeed.resume_speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c03: port set_speed -> setSpeed.set_speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c04: port inc -> setSpeed.inc
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c05: port dec -> setSpeed.dec
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c06: port brake_cancel -> setSpeed.brake_cancel
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c07: port measureSpeed.speed -> setSpeed.speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c08: port measureSpeed.speed -> controlSpeed.speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c09: port setSpeed.enabled -> enabled
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c10: port setSpeed.desired_speed -> controlSpeed.desired_speed
			{
				VERDICT_Properties::connectionType => Untrusted;
				VERDICT_Properties::deviceAuthentication => 0;
				VERDICT_Properties::encryptedTransmission => 0;
			};
			c11: port controlSpeed.force -> force
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c12: port rotate -> measureSpeed.rotate
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			c13: port second -> measureSpeed.second
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			-- Virtual connection for the sake of analysis
			v01: port setSpeed.desired_speed -> desired_speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
			v02: port measureSpeed.speed -> speed
			{
				VERDICT_Properties::connectionType => Trusted;
			};
	end CruiseControllerSystem.Impl;
	
end CruiseController;
